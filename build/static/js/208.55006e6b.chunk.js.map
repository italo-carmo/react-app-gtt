{"version":3,"file":"static/js/208.55006e6b.chunk.js","mappings":"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","sources":["components/grafico-barras/index.js","views/grafico-pau-de-sebo/index.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport {\n  Chart,\n  CategoryScale,\n  LinearScale,\n  BarController,\n  BarElement,\n  LineController,\n  LineElement,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\n\nChart.register(\n  CategoryScale,\n  LinearScale,\n  BarController,\n  BarElement,\n  LineController,\n  LineElement,\n  Tooltip,\n  Legend,\n  annotationPlugin\n);\n\n\nconst BarChart = ({ data, media }) => {\n  const chartRef = useRef(null);\n  \n  const convertDurationToHours = (duration) => {\n    if (duration !== '00:00') {\n      const [hours, minutes] = duration.split(':');\n      const totalHours = parseInt(hours, 10) + parseInt(minutes, 10) / 60;\n      return totalHours;\n    } else {\n      return 0;\n    }\n  };\n\n\n\n\n  useEffect(() => {\n    if (data && data.length > 0) {\n      const labels = data.map((item) => item.trigrama);\n      let hours = []\n      data.forEach((item) => {\n\n        hours.push(convertDurationToHours(item.horas))\n    });\n      const ctx = document.getElementById('bar-chart').getContext('2d');\n\n      const chart = new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [\n            {\n              label: 'Horas Voadas',\n              data: hours,\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1,\n            },\n          ],\n        },\n        options: {\n          responsive: true,\n          scales: {\n            y: {\n              display: true,\n              title: {\n                display: true,\n                text: 'Horas Voadas',\n              },\n              suggestedMax: 140,\n              suggestedMin: 0, // Adicione essa linha\n              ticks: {\n                stepSize: 10,\n              },\n            },\n            x: {\n              display: true,\n              title: {\n                display: true,\n                text: 'Trigramas',\n              },\n            },\n          },\n          plugins: {\n            annotation: {\n                annotations: {\n                  line1: {\n                    type: 'line',\n                    yMin: media,\n                    yMax: media,\n                    borderColor: 'rgb(255, 99, 132)',\n                    borderWidth: 2,\n                  }\n                }\n              }\n          },\n        },\n      });\n\n      chartRef.current = chart;\n    }\n  }, [data]);\n\n  return <canvas id=\"bar-chart\" width=\"400\" height=\"200\" />;\n};\n\nexport default BarChart;\n","import React, { useEffect, useState } from 'react'\nimport styles from './styles.css'\nimport GraficoBarras from '../../components/grafico-barras/index'\nimport LoadingSpinner from 'src/components/Loading'\nimport {\n  CCard,\n\n} from '@coreui/react'\nimport { Alert } from '@coreui/coreui'\nimport useApi from 'src/services/Api'\n\n\nconst PauDeSebo = () => {\n\n  const Api = useApi()\n  const [dados, setDados] = useState([])\n  const [funcao, setFuncao] = useState('Piloto')\n  const [media, setMedia] = useState(0)\n  const [mediaTotal, setMediaTotal] = useState(0)\n  const [loading, setLoading] = useState(false)\n\n  var dados_excessao = {\n    excessoes: [{\n        trigrama: 'LTE',\n        horas: '20:00'\n      },\n      {\n        trigrama: 'FAC',\n        horas: '20:00'\n      },\n      {\n        trigrama: 'PTS',\n        horas: '60:00'\n      }]\n    }\n\n  var porcentagens = [0.04, 0.08, 0.16, 0.24, 0.32, 0.4, 0.5, 0.61, 0.72, 0.82, 0.92, 1]\n  var hoje = new Date()\n  var mes_atual = hoje.getMonth()\n  var porcentagem_atual = porcentagens[mes_atual]\n\n  const convertDurationToHours = (duration) => {\n    if (duration !== '00:00') {\n      const [hours, minutes] = duration.split(':');\n      const totalHours = parseInt(hours, 10) + parseInt(minutes, 10) / 60;\n      return totalHours;\n    } else {\n      return 0;\n    }\n  };\n  \n\n  const getDados = async () => {\n    setLoading(true)\n    let res_esforco = await Api.getEsforcoAereo()\n    var horas_totais = 0\n    res_esforco.data.forEach(item => {\n        if((item.nome).trim() == 'TOTAL') {\n          horas_totais = item.alocado\n        }\n      })\n    let horas_parsed = convertDurationToHours(horas_totais)\n    let horas_excessao = 0\n    let res = await Api.getPauDeSebo()\n    let dados_to_add = []\n    if(!res.error) {\n      res.data.forEach(item => {\n        if(item.Funcao == funcao) {\n          console.log(item.Trigrama)\n          dados_to_add.push({trigrama:item.Trigrama, horas: item.Horas})\n          if(funcao == 'Piloto') {\n            let index = dados_excessao.excessoes.findIndex(i=>i.trigrama == item.Trigrama)\n            if(index >=0) {\n                horas_excessao += convertDurationToHours(dados_excessao.excessoes[index].horas)\n            }\n          }\n        }\n      });\n      setMediaTotal(((horas_parsed-horas_excessao)/((dados_to_add.length-dados_excessao.excessoes.length)/2)))\n      setMedia(((horas_parsed-horas_excessao)/((dados_to_add.length-dados_excessao.excessoes.length)/2)*porcentagem_atual))\n      setDados(dados_to_add)\n      setLoading(false)\n    }\n  }\n\n  const formatDuration = (value) => {\n    const hours = Math.floor(value);\n    const minutes = Math.floor((value - hours) * 60);\n  \n    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n\n\n\n  useEffect(()=>{\n    getDados()\n  },[])\n\n  //let dados = [{trigrama: 'ITL', horas:'120:00'},{trigrama: 'POR', horas:'110:00'},{trigrama: 'TNT', horas:'130:00'}]\n  return (\n    <>\n      <CCard className=\"mb-6\" style={{flexDirection: 'column'}}>\n        {loading && <div style={{display: 'flex', alignItems: 'center', justifyContent:'center', marginTop:50}}><LoadingSpinner width=\"150px\" black={true}/></div>}\n        <GraficoBarras data={dados} media={media}/>\n        <div className=\"point-info\" style={{display:'flex', flexDirection:'column', alignItens: 'center', justifyContent: 'center', marginTop:10, marginBottom:10}}>\n          <span style={{display:'flex', alignItems: 'center', justifyContent: 'center'}}>Média de horas anuais: {formatDuration(mediaTotal)}</span>\n          <span style={{display:'flex', alignItems: 'center', justifyContent: 'center'}}>Média de horas esse mês: {formatDuration(media)}</span>\n        </div>\n      </CCard>\n     \n    </>\n  )\n}\n\nexport default PauDeSebo\n"],"names":["Chart","register","CategoryScale","LinearScale","BarController","BarElement","LineController","LineElement","Tooltip","Legend","annotationPlugin","_ref","data","media","chartRef","useRef","useEffect","length","labels","map","item","trigrama","hours","forEach","push","duration","minutes","split","parseInt","convertDurationToHours","horas","ctx","document","getElementById","getContext","chart","type","datasets","label","backgroundColor","borderColor","borderWidth","options","responsive","scales","y","display","title","text","suggestedMax","suggestedMin","ticks","stepSize","x","plugins","annotation","annotations","line1","yMin","yMax","current","_jsx","id","width","height","PauDeSebo","Api","useApi","dados","setDados","useState","funcao","setFuncao","setMedia","mediaTotal","setMediaTotal","loading","setLoading","dados_excessao","excessoes","porcentagem_atual","Date","getMonth","formatDuration","value","Math","floor","concat","toString","padStart","async","res_esforco","getEsforcoAereo","horas_totais","nome","trim","alocado","horas_parsed","horas_excessao","res","getPauDeSebo","dados_to_add","error","Funcao","console","log","Trigrama","Horas","index","findIndex","i","getDados","_Fragment","children","_jsxs","CCard","className","style","flexDirection","alignItems","justifyContent","marginTop","LoadingSpinner","black","GraficoBarras","alignItens","marginBottom"],"sourceRoot":""}