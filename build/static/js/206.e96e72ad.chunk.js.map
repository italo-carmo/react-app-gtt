{"version":3,"file":"static/js/206.e96e72ad.chunk.js","mappings":"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","sources":["views/planejamento/Main.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport styles from './styles.css'\nimport {\n  CButton,\n  CCard,\n\n} from '@coreui/react'\nimport useApi from 'src/services/Api'\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { forwardRef } from 'react'\nimport LoadingSpinner from 'src/components/Loading'\nimport ReactDatePicker from 'react-datepicker';\nimport { getQuarter, setHours } from 'date-fns';\n\nconst Etapas = () => {\n\n  const [planejamento, setPlanejamento] = useState([])\n  const [rota, setRota] = useState('')\n  const [dataInicio, setDataInicio] = useState(new Date());\n  const [icao, setIcao] = useState('');\n  const [horasTotais, setHorasTotais] = useState(0);\n  const [loading, setLoading] = useState(false)\n  const [tripulacao, setTripulacao] = useState('Simples')\n  const [fadiga, setFadiga] = useState(new Date());\n  const [fadigas, setFadigas] = useState([]);\n  const [edit, setEdit] = useState(false);\n  const [indexEdit, setIndexEdit] = useState('');\n\n  const Api = useApi()\n\n  const DateInput = ({ value, onClick }) => (\n    <img style={{cursor:'pointer', marginLeft: 5}} src='https://www.1gtt.com.br/app/calendar-black.png' width=\"30px\" onClick={onClick}/>\n  )\n\n  function millisToHoursAndMinutes(millis) {\n    if (isNaN(millis) || millis < 0) {\n      return \"Invalid input\";\n    }\n  \n    // Calcula as horas e minutos\n    const hours = Math.floor(millis / (1000 * 60 * 60));\n    const minutes = Math.floor((millis % (1000 * 60 * 60)) / (1000 * 60));\n  \n    // Formata a representação da duração\n    const formattedHours = String(hours).padStart(2, '0');\n    const formattedMinutes = String(minutes).padStart(2, '0');\n  \n    return `${formattedHours}:${formattedMinutes}`;\n  }\n\n  const isoDateToHourMinutes = (date) => {\n    try {\n      if(typeof(date) != 'string') {\n        date = date.toISOString()\n      }\n      let [data, horas] = date.split('T')\n      let [hora, minuto, segundo] = horas.split(':')\n      return hora+':'+minuto\n    } catch {\n      return '00:00'\n    }\n    \n  }\n\n  const isoDateToDate = (date) => {\n    try {\n      if(typeof(date) != 'string') {\n        date = date.toISOString()\n      }\n      let [data, horas] = date.split('T')\n      let [ano, mes, dia] = data.split('-')\n      return dia+'/'+mes+'/'+ano\n    }\n    catch {\n      return '00:00'\n    }\n  }\n\n  const tripulacoes = [\"Simples\", \"Composta\", \"Revezamento\"]\n\n\n  const calcularFadiga = (horaDecolagem) => {\n    let fadigaBase;\n\n    switch (tripulacao) {\n      case 'SIMPLES':\n        fadigaBase = 43200000; // 12 horas\n        break;\n      case 'COMPOSTA':\n        fadigaBase = 50400000; // 14 horas\n        break;\n      case 'REVEZAMENTO':\n        fadigaBase = 61200000; // 17 horas\n        break;\n      default:\n        fadigaBase = 0;\n    }\n\n    // Verificar se a decolagem está entre 22h e 6h\n    const horaLocal = horaDecolagem.getHours();\n    if (horaLocal >= 22 || horaLocal < 6) {\n      const intervalo = (horaLocal >= 22) ? horaLocal - 22 : horaLocal + 2; // Calcula o intervalo em horas\n      fadigaBase -= intervalo * 30 * 60 * 1000; // Diminui a fadiga a cada hora no intervalo\n    }\n\n    return fadigaBase;\n  };\n\n    // Função para formatar o tempo de solo em hh:mm\n    const formatarTempoSolo = (tempoSolo) => {\n      const horas = Math.floor(tempoSolo / 60);\n      const minutos = tempoSolo % 60;\n      return `${horas.toString().padStart(2, '0')}:${minutos.toString().padStart(2, '0')}`;\n    };\n\n\n    const getPlanejamento = async () => {\n      let rota_split = rota.split(',')\n      let res = await Api.getPlanejamento({rota: rota_split})\n    \n      if (res.error) {\n        alert(res.error)\n        return\n      }\n    \n      // Iterar sobre os dados da rota e criar a tabela\n      const tabelaVoos = [];\n      let horaDecolagem = dataInicio;\n    \n      res.data.forEach((trecho, index) => {\n        const horaPouso = new Date(horaDecolagem.getTime() + trecho.tempo);\n        const tempoSoloMillis = 120 * 60 * 1000; // Tempo de solo inicial de 2 horas em milissegundos\n    \n        tabelaVoos.push({\n          data: horaDecolagem.toISOString().split('T')[0],\n          origem: trecho.origem,\n          destino: trecho.destino,\n          DEP: horaDecolagem.toISOString(),\n          ARR: horaPouso.toISOString(),\n          TEV: millisToHoursAndMinutes(trecho.tempo),\n          tempoSolo: millisToHoursAndMinutes(tempoSoloMillis),\n        });\n    \n        horaDecolagem = new Date(horaPouso.getTime() + tempoSoloMillis); // Atualiza o horário de decolagem para o próximo trecho\n      });\n    \n      return(tabelaVoos)\n    }\n    \n\n    const getDados = async () => {\n      if (!rota) {\n        alert('Rota é obrigatória')\n        return\n      }\n      let rota_split = rota.split(',')\n\n      if(rota_split.length<=1) {\n        alert('Digite ao menos 2 ICAO')\n        return\n      }\n\n      const allICAOsValid = rota_split.every(it => it.length === 4);\n\n      if (!allICAOsValid) {\n        alert('Confira os ICAOS');\n        return;\n      }\n\n      if (!dataInicio) {\n        alert('Data Inicial é obrigatória')\n        return\n      }\n      if(!edit) {\n       let dados = await getPlanejamento()\n       dados.rota = rota\n       var planejamento_copy = [...planejamento]\n       planejamento_copy.push(dados)\n      } else {\n        let dados = await getPlanejamento()\n       dados.rota = rota\n       var planejamento_copy = [...planejamento]\n       planejamento_copy[indexEdit] = dados\n      }\n      setPlanejamento(planejamento_copy)\n      \n      setRota(rota_split[rota_split.length - 1])\n      setEdit(false)\n      setIndexEdit('')\n    }\n\n  useEffect(()=>{\n  },[])\n\n\n   const transformTime = (time) => {\n    let [hora, minuto, segundo] = time.split(':')\n    return hora+':'+minuto\n   }\n\n     \n  // Adicione esta constante para evitar repetição de cálculos\n  const parseHorasMinutosParaMillis = (tempo) => {\n    const [horas, minutos] = tempo.split(':');\n    return parseInt(horas) * 60 * 60 * 1000 + parseInt(minutos) * 60 * 1000;\n  };\n\n  const atualizarProximaDecolagem = (planejamento, indice, novoTempoSolo) => {\n    if (novoTempoSolo.length === 5) {\n      const novoTempoSoloMillis = parseHorasMinutosParaMillis(novoTempoSolo);\n      let horaProximaDecolagem = new Date(planejamento[indice - 1].ARR);\n\n      let time = ((horaProximaDecolagem.getTime()))\n      let mili = novoTempoSoloMillis\n      horaProximaDecolagem.setTime(time +  mili)\n\n      return horaProximaDecolagem\n    } else {\n      return planejamento[indice].DEP;\n    }\n  };\n  \n\n  \n\n   const inputStyle = {\n    padding: '5px',\n    borderRadius: '10px',\n    border: '1px solid #000',\n  };\n\n  const botaoStyle = {\n    backgroundColor: 'green',\n    color: 'white',\n    padding: '2px 20px',\n    borderRadius: '5px',\n    border: 'none',\n    cursor: 'pointer',\n    fontSize: 12,\n    marginBottom:5\n  };\n\n  const botaoStyleRed = {\n    backgroundColor: 'black',\n    color: 'white',\n    padding: '2px 20px',\n    borderRadius: '5px',\n    border: 'none',\n    cursor: 'pointer',\n    marginLeft:5,\n    fontSize: 12,\n    width:80\n  };\n\n  const inputStyleLow = {\n    width:500\n  };\n  \n   // Funções de ação para atualizar os estados quando os valores dos filtros mudarem\n   const handleChangeTrip = (e) => {\n    setTripulacao(e.target.value);\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      // A tecla \"Enter\" foi pressionada, execute sua função aqui\n      getDados();\n    }\n  };\n\n  const handleRotaChange = (e) => {\n    setRota(e.target.value.toUpperCase());\n  };\n\n  const minutosParaHorasMinutos = (minutos) => {\n    const horas = Math.floor(minutos / 60);\n    const minutosRestantes = minutos % 60;\n    const horasFormatadas = horas.toString().padStart(2, '0');\n    const minutosFormatados = minutosRestantes.toString().padStart(2, '0');\n    return `${horasFormatadas}:${minutosFormatados}`;\n  }\n\n  const getArr = (dep, tev) => {\n \n    let data = new Date(dep)\n    let [hora, minuto] = tev.split(':')\n    let milisegundos = (parseInt(hora) * 3600000) + (parseInt(minuto) *60000)\n    data.setTime(data.getTime() + milisegundos)\n    return data\n  }\n\n  return (\n    <>\n      <CCard className=\"mb-6\" style={{flexDirection: 'column', overflowX: 'auto',minHeight: 500,  maxHeight:700 }}>\n      <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px', marginTop: '20px',  marginLeft:10, marginRight:10 }}>\n      {/* Filtro de Data */}\n      <div style={{ marginRight: '20px', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n        <label>Data Início:</label>\n        <div className='input-obs' style={{marginLeft:5}}>                  \n                  {dataInicio.toLocaleString([], { year: 'numeric', month: '2-digit', day: '2-digit', hour: 'numeric', minute: 'numeric',  timeZone: 'UTC'})+'Z'}\n        </div>\n        <div style={{zIndex: 9999 }}>\n            <ReactDatePicker\n              selected={dataInicio}\n              onChange={(date) => {\n                if (date) {\n                  const dataInicioCopia = new Date(date);\n                  // Configura a hora diretamente como UTC\n                  dataInicioCopia.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n                  setDataInicio(dataInicioCopia)\n                }\n              }}\n              customInput={<DateInput />}\n              showTimeSelect\n              timeFormat=\"HH:mm\"\n              timeIntervals={5}\n              dateFormat=\"LLL\"\n              timeZone=\"UTC\"\n              timeZoneData={[{ value: 'Etc/UTC', label: 'Zulu (GMT 0)' }]}\n              utcOffset={0} // Defina o offset UTC para 0\n              popperClassName=\"datePickerPopper\" // Adicione uma classe específica para personalizar o popper\n              calendarClassName=\"datePickerCalendar\" // Adicione uma classe específica para personalizar o calendário\n            />\n        </div>\n      </div>\n       {/* Filtro de ICAO */}\n       <div style={{ marginRight: '20px' }}>\n        <label style={{marginRight:5}}>ROTA:</label>\n        <input type=\"text\" value={rota} onKeyPress={handleKeyPress} onChange={handleRotaChange} style={inputStyleLow}/>\n      </div>\n        {/* Botão \"Pesquisar\" */}\n        <div className='buttons'>\n          <button style={botaoStyle} onClick={()=>getDados()}>{edit ? 'Editar' : 'Adicionar'}</button>\n        </div>\n\n    </div>\n    <div style={{ display: 'flex', alignItems: 'center', marginBottom: '20px',  marginLeft:10, marginRight:10 }}>\n\n              {/* Trip */}\n              <div style={{ marginRight: '20px' }}>\n        <label style={{marginRight:5}}>Tripulação:</label>\n        <select style={inputStyle} value={tripulacao} onChange={handleChangeTrip}>\n          <option value=\"\">Selecione</option>\n          {tripulacoes.map(i=>{\n            return (\n              <option value={i}>{i}</option>\n            )\n          })}\n        </select>\n      </div>\n      </div>\n          {\n            planejamento.map((item, idx)=>{\n              var limite_fadiga = new Date(item[0].DEP)\n              var dep_inicial = new Date(item[0].DEP)\n\n              if(tripulacao == 'Simples') {\n                limite_fadiga.setTime(limite_fadiga.getTime() + 43200000)\n              }\n              if(tripulacao == 'Composta') {\n                limite_fadiga.setTime(limite_fadiga.getTime() + 50400000)\n              }\n              if(tripulacao == 'Revezamento') {\n                limite_fadiga.setTime(limite_fadiga.getTime() + 61200000)\n              }\n\n              var inicio_loop = dep_inicial\n\n              while (limite_fadiga > inicio_loop) {\n\n                let horas = inicio_loop.getHours()\n                if (horas > 22 || horas < 6) {\n                    limite_fadiga.setMilliseconds(limite_fadiga.getMilliseconds() - 1800000)\n                } \n                inicio_loop.setMilliseconds(inicio_loop.getMilliseconds() + 3600000)\n            }\n              return (\n                <div style={{display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'}}>\n                  <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', marginBottom: 10}}>\n                    <span style={{fontWeight: 'bold', marginRight: 10}}>DIA {idx + 1}</span>\n                    <img onClick={()=>{\n                      setEdit(true)\n                      setIndexEdit(idx)\n                      setRota(item.rota)\n                      let data = new Date(item[0].DEP)\n                      setDataInicio(data)\n                    }} width=\"15\" height=\"15\" src='https://www.1gtt.com.br/app/pen.png' />\n                  </div>\n              <table style={{marginBottom:20, zIndex: 2, width: '90%'}}>\n              <thead className='tabela-cabecalho'>\n                <tr>\n                  <th>Data</th>\n                  <th>Origem</th>\n                  <th>Destino</th>\n                  <th>DEP</th>\n                  <th>ARR</th>\n                  <th>TEV</th>\n                  <th>Tempo Solo</th>\n                </tr>\n              </thead>\n              {item.map((voo, index) => {\n            \n\n                try {\n                  if(index == 0) {\n                    var dep = voo.DEP\n                  } else {\n                    var tempos_solo = 0\n                    var tempos_voo = 0\n                    for(let i=0;i<index;i++) {\n                      tempos_voo+= parseHorasMinutosParaMillis(item[i].TEV)\n                      tempos_solo+= parseHorasMinutosParaMillis(item[i].tempoSolo)\n                    }\n                    var dep_date = new Date(item[0].DEP)\n                    dep_date.setTime(dep_date.getTime() + tempos_solo + tempos_voo)\n                    var dep = dep_date\n                  }\n                } catch(e) {\n                  var dep = '00:00'\n                }\n\n                let pouso_edit = getArr(dep, voo.TEV)\n                \n                var isFadiga = false\n\n                if(pouso_edit > limite_fadiga) {\n                  isFadiga = true\n                }\n\n                return (\n                <tr key={index} style={{color: isFadiga ? '#FF0000' : '#000'}}>\n                  <td style={{fontWeight: 'bold'}}>\n                  {voo.TEV.length == 5 ? isoDateToDate(dep) : ''}\n                    </td>\n                  <td>{voo.origem}</td>\n                  <td>{voo.destino}</td>\n                  <td>{voo.TEV.length == 5 ? isoDateToHourMinutes(dep) : ''}</td>\n                  <td>{voo.TEV.length == 5 ? isoDateToHourMinutes(pouso_edit) : ''}</td>\n                  <td>{voo.TEV}</td>\n                  <td>\n                  <input\n                      type=\"text\"\n                      value={voo.tempoSolo}\n                      onChange={(e) => {\n                        const novoValor = e.target.value;\n                        // Atualizar o valor de tempoSolo no estado\n                        let planejamento_copy = [...planejamento]\n                        let voo_map = item.map((it, i) => {\n                            if(i === index) {\n                              return { ...it, tempoSolo: novoValor }\n                            } else {\n                              return it\n                            }\n                          }\n                        )\n                        planejamento_copy[idx] = voo_map\n                        setPlanejamento(planejamento_copy)\n                      }\n                    }\n                    />\n                  </td>\n                </tr>\n              )\n            }\n              )}\n            </table>\n            <span style={{fontWeight: 'bold', marginBottom: 50}}>Limite da Fadiga: {isoDateToDate(limite_fadiga)+' '+isoDateToHourMinutes(limite_fadiga)}</span>\n            </div>\n            )\n            })\n          }\n       \n        {loading &&\n                <div  style={{\n                  position: 'absolute',\n                  left: '50%',\n                  top: '80%',\n                  transform: 'translate(-50%, -50%)',\n                  zIndex:99\n                }}>\n                  <LoadingSpinner black={true} width=\"50px\" />\n                </div>\n        }\n      </CCard>\n     \n    </>\n  )\n}\n\nexport default Etapas\n"],"names":["_useState","useState","_useState2","_slicedToArray","planejamento","setPlanejamento","_useState3","_useState4","rota","setRota","_useState5","Date","_useState6","dataInicio","setDataInicio","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","loading","_useState13","_useState14","tripulacao","setTripulacao","_useState15","_useState16","_useState17","_useState18","_useState19","_useState20","edit","setEdit","_useState21","_useState22","indexEdit","setIndexEdit","Api","useApi","DateInput","_ref","value","onClick","_jsx","style","cursor","marginLeft","src","width","millisToHoursAndMinutes","millis","isNaN","hours","Math","floor","minutes","formattedHours","String","padStart","formattedMinutes","concat","isoDateToHourMinutes","date","toISOString","_date$split","split","_date$split2","_horas$split","_horas$split2","hora","minuto","_unused","isoDateToDate","_date$split3","_date$split4","data","_data$split","_data$split2","ano","mes","_unused2","getPlanejamento","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","rota_split","res","tabelaVoos","horaDecolagem","wrap","_context","prev","next","sent","error","alert","abrupt","forEach","trecho","index","horaPouso","getTime","tempo","tempoSoloMillis","push","origem","destino","DEP","ARR","TEV","tempoSolo","stop","apply","arguments","getDados","_ref3","_callee2","dados","planejamento_copy","_dados","_context2","length","every","it","_toConsumableArray","useEffect","parseHorasMinutosParaMillis","_tempo$split","_tempo$split2","horas","minutos","parseInt","_Fragment","children","_jsxs","CCard","className","flexDirection","overflowX","minHeight","maxHeight","display","alignItems","marginBottom","marginTop","marginRight","justifyContent","toLocaleString","year","month","day","hour","minute","timeZone","zIndex","ReactDatePicker","selected","onChange","dataInicioCopia","setMinutes","getMinutes","getTimezoneOffset","customInput","showTimeSelect","timeFormat","timeIntervals","dateFormat","timeZoneData","label","utcOffset","popperClassName","calendarClassName","type","onKeyPress","event","key","e","target","toUpperCase","backgroundColor","color","padding","borderRadius","border","fontSize","map","i","item","idx","limite_fadiga","dep_inicial","setTime","inicio_loop","getHours","setMilliseconds","getMilliseconds","fontWeight","height","voo","dep","tempos_solo","tempos_voo","dep_date","pouso_edit","tev","_tev$split","_tev$split2","milisegundos","getArr","isFadiga","novoValor","voo_map","_objectSpread","position","left","top","transform","LoadingSpinner","black"],"sourceRoot":""}