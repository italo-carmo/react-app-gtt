{"version":3,"file":"static/js/32.1b5ebd2f.chunk.js","mappings":"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","sources":["views/timeline-exercicios/Main.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport styles from './styles.css'\nimport {\n  CButton,\n  CCard,\n\n} from '@coreui/react'\nimport useApi from 'src/services/Api'\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { forwardRef } from 'react'\nimport LoadingSpinner from 'src/components/Loading'\n\n\nconst Etapas = () => {\n\n  const [etapas, setEtapas] = useState([])\n  const [etapasFiltered, setEtapasFiltered] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [exercicios, setExercicios] = useState([])\n  const [exerciciosPorMes, setExerciciosPorMes] = useState({})\n  \n\n  let meses = [\"Janeiro\", \"Fevereiro\", \"Março\", \"Abril\", \"Maio\", \"Junho\", \"Julho\", \"Agosto\", \"Setembro\", \"Outubro\", \"Novembro\", \"Dezembro\"]\n  let dias = [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]\n  const Api = useApi()\n\n  function formatarNumero(numero) {\n    // Converte o número para uma string e substitui o ponto por vírgula\n    const numeroString = numero.toFixed(2).replace('.', ',');\n  \n    // Separa a parte inteira da parte decimal\n    const partes = numeroString.split(',');\n  \n    // Adiciona ponto como separador de milhares na parte inteira\n    partes[0] = partes[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n  \n    // Junta as partes novamente\n    const numeroFormatado = partes.join(',');\n  \n    return numeroFormatado;\n  }\n\n  const getExercicios = async () => {\n    let res = await Api.getExercicios();\n    if (!res.error) {\n      const exerciciosData = res.data;\n  \n      const exerciciosPorMesCopy = meses.map(() => []); // Cria uma matriz vazia para armazenar os exercícios de cada mês\n  \n      exerciciosData.forEach(exercicio => {\n        const dataInicio = new Date(exercicio.data_inicio + 'T06:00:00Z');\n        const dataFim = new Date(exercicio.data_fim + 'T06:00:00Z');\n  \n        // Verifica se o exercício abrange mais de um mês\n        if (dataInicio.getMonth() !== dataFim.getMonth()) {\n          const primeiroMes = dataInicio.getMonth();\n          const ultimoMes = dataFim.getMonth();\n  \n          // Adiciona o exercício ao primeiro mês\n          exerciciosPorMesCopy[primeiroMes].push(exercicio);\n  \n          // Adiciona o exercício aos meses intermediários (se houver)\n          for (let i = primeiroMes + 1; i < ultimoMes; i++) {\n            exerciciosPorMesCopy[i].push(exercicio);\n          }\n  \n          // Adiciona o exercício ao último mês\n          exerciciosPorMesCopy[ultimoMes].push(exercicio);\n        } else {\n          // Se o exercício não abrange mais de um mês, adiciona-o ao mês correspondente\n          const mes = dataInicio.getMonth();\n          exerciciosPorMesCopy[mes].push(exercicio);\n        }\n      });\n  \n      console.log(exerciciosPorMesCopy);\n      setExerciciosPorMes(exerciciosPorMesCopy);\n    }\n  };\n  \n\n  function gerarCorAleatoria() {\n    let cor;\n    do {\n      // Gera valores aleatórios para os canais de cor vermelho, verde e azul\n      const r = Math.floor(Math.random() * 256); // Red (0-255)\n      const g = Math.floor(Math.random() * 256); // Green (0-255)\n      const b = Math.floor(Math.random() * 256); // Blue (0-255)\n  \n      // Garante que a cor resultante seja mais clara\n      const somaCores = r + g + b;\n      const minSomaCores = 384; // Este é um terço de 255 * 3 (o valor máximo para cada canal)\n      if (somaCores >= minSomaCores) {\n        // Converte os valores para representação hexadecimal\n        cor = '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n      }\n    } while (!cor); // Repete o processo até encontrar uma cor válida\n  \n    return cor;\n  }\n  \n  \n  \n  useEffect(()=>{\n    getExercicios()\n  },[])\n\n\n  return (\n    <>\n      <CCard className=\"mb-6\" style={{flexDirection: 'column', maxHeight:700 }}>\n    <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n    <div style={{maxWidth: '95%', overflowX: 'auto', marginTop:30}}>\n    <table style={{marginBottom: 20}}>\n  <tr>\n    <th>\n      Mês\n    </th>\n    <th>\n      Nome\n    </th>\n    {dias.map(i => {\n      return <th style={{fontSize: '0.6vw'}}>{i}</th>\n    })}\n  </tr>\n  {meses.map((mes, index) => {\n    const exerciciosDoMes = exerciciosPorMes[index] || [];\n\n    const rowspan = exerciciosDoMes.length > 0 ? exerciciosDoMes.length : 1;\n\n      // Ordena os exercícios pelo data_inicio\n    exerciciosDoMes.sort((a, b) => {\n      return new Date(a.data_inicio) - new Date(b.data_inicio);\n    });\n\n    return (\n      <React.Fragment key={index}>\n        {exerciciosDoMes.map((exercicio, idx) => {\n          let cor = gerarCorAleatoria();\n\n          // Converte as datas de início e fim do exercício para objetos Date\n          const dataInicio = new Date(exercicio.data_inicio);\n          const dataFim = new Date(exercicio.data_fim);\n\n          return (\n            <React.Fragment key={idx}>\n              {/* Renderiza apenas se o exercício estiver dentro do intervalo do mês */}\n              { (\n                <tr>\n                  {idx === 0 && <td style={{backgroundColor: '#d6dce9'}} rowSpan={rowspan}>{mes}</td>}\n                  <td style={{ backgroundColor: cor, fontWeight: 'bold' }}>{exercicio.nome}</td>\n                  {dias.map(dia => {\n                    const dentroDoIntervalo =\n                      (dataInicio <= new Date(dataInicio.getFullYear(), index, dia)) &&\n                      (new Date(dataFim.getFullYear(), index, dia) <= dataFim);\n                    return (\n                      <td key={dia} style={{ fontSize: '0.6vw', fontWeight: 'bold', backgroundColor: dentroDoIntervalo ? cor : '' }}>\n                        {dentroDoIntervalo ? dia : ''}\n                      </td>\n                    );\n                  })}\n                </tr>\n              )}\n            </React.Fragment>\n          );\n        })}\n        {exerciciosDoMes.length === 0 && (\n          <tr>\n            <td style={{backgroundColor: '#d6dce9'}}>{mes}</td>\n            <td></td>\n            {dias.map(() => <td></td>)}\n          </tr>\n        )}\n      </React.Fragment>\n    );\n  })}\n</table>\n\n    </div>\n    </div>\n\n        {loading &&\n                <div  style={{\n                  position: 'absolute',\n                  left: '50%',\n                  top: '80%',\n                  transform: 'translate(-50%, -50%)',\n                  zIndex:99\n                }}>\n                  <LoadingSpinner black={true} width=\"50px\" />\n                </div>\n        }\n      </CCard>\n     \n    </>\n  )\n}\n\nexport default Etapas\n"],"names":["Etapas","etapas","setEtapas","useState","etapasFiltered","setEtapasFiltered","loading","setLoading","exercicios","setExercicios","exerciciosPorMes","setExerciciosPorMes","meses","dias","Api","useApi","useEffect","async","res","getExercicios","error","exerciciosData","data","exerciciosPorMesCopy","map","forEach","exercicio","dataInicio","Date","data_inicio","dataFim","data_fim","getMonth","primeiroMes","ultimoMes","push","i","mes","console","log","_jsx","_Fragment","children","_jsxs","CCard","className","style","flexDirection","maxHeight","display","alignItems","justifyContent","maxWidth","overflowX","marginTop","marginBottom","fontSize","index","exerciciosDoMes","rowspan","length","sort","a","b","React","idx","cor","r","Math","floor","random","g","toString","slice","gerarCorAleatoria","backgroundColor","rowSpan","fontWeight","nome","dia","dentroDoIntervalo","getFullYear","position","left","top","transform","zIndex","LoadingSpinner","black","width"],"sourceRoot":""}